#include "SLMouseActor.h"
#include "Character/BattleComponent/BattleComponent.h"
#include "Character/SLPlayerCharacter.h"
#include "Components/StaticMeshComponent.h"
#include "Components/SphereComponent.h"
#include "NiagaraFunctionLibrary.h"
#include "Kismet/GameplayStatics.h"
#include "Kismet/KismetMathLibrary.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Character/GamePlayTag/GamePlayTag.h"
#include "GameFramework/CharacterMovementComponent.h"

ASLMouseActor::ASLMouseActor()
{
	PrimaryActorTick.bCanEverTick = true;

	// Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±
	RootSceneComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootSceneComponent"));
	RootComponent = RootSceneComponent;

	MouseMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("MouseMeshComponent"));
	MouseMeshComponent->SetupAttachment(RootComponent);
	MouseMeshComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);

	CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("CollisionComponent"));
	CollisionComponent->SetupAttachment(RootComponent);
	CollisionComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Block);
	CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);

	BattleComponent = CreateDefaultSubobject<UBattleComponent>(TEXT("BattleComponent"));

	// Orbit Settings Ï¥àÍ∏∞Ìôî
	OrbitRadius = 300.0f;
	OrbitHeight = 400.0f;
	OrbitSpeed = 90.0f;
	MoveToOrbitSpeed = 500.0f;

	// Movement Settings Ï¥àÍ∏∞Ìôî
	DescentSpeed = 800.0f;
	GrabMoveSpeed = 600.0f;

	// Grab Settings Ï¥àÍ∏∞Ìôî
	GrabDistance = 500.0f;
	GrabHeight = 300.0f;
	GrabDamage = 20.0f;
	GrabCooldownMin = 2.0f;
	GrabCooldownMax = 5.0f;
	CollisionDisableTime = 2.0f;

	// General Settings Ï¥àÍ∏∞Ìôî
	MaxHealth = 100.0f;
	DetectionRange = 100.0f;

	// Effects Ï¥àÍ∏∞Ìôî
	GrabEffect = nullptr;
	DestroyEffect = nullptr;
	GrabSound = nullptr;
	DestroySound = nullptr;

	// Phase 3 Settings Ï¥àÍ∏∞Ìôî
	Phase3ChaseSpeed = 800.0f;
	Phase3StopDistance = 100.0f;
	PlayerLookCheckAngle = 15.0f;
	Phase3HorrorMesh = nullptr;
	Phase3HorrorScale = FVector(1.0f, 1.0f, 1.0f);
	SweepAttackDamage = 30.0f;
	SweepAttackRange = 500.0f;
	SweepAttackCooldown = 5.0f;
	SweepAttackEffect = nullptr;
	bShowSweepDebug = true;
	SweepAttackHitCount = 5;
	SweepAttackHitInterval = 0.1f;

	// Phase 5 Settings Ï¥àÍ∏∞Ìôî
	DefaultWallStunDuration = 3.0f;
	StunEffect = nullptr;
	StunSound = nullptr;

	// Private Variables Ï¥àÍ∏∞Ìôî
	CurrentState = EMouseActorState::Inactive;
	CurrentHealth = 0.0f;
	TargetPlayer = nullptr;
	GrabTargetLocation = FVector::ZeroVector;
	MoveToOrbitTargetLocation = FVector::ZeroVector;
	bCanGrab = true;
	OrbitAngle = 0.0f;
	OrbitCenter = FVector::ZeroVector;

	bIsInPhase3Mode = false;
	bIsPlayerLookingAtMe = false;
	OriginalMesh = nullptr;

	bCanSweepAttack = true;
	CurrentHitCount = 0;

	bIsStunned = false;
	bIsAttackable = false;

	// Drop Settings Ï¥àÍ∏∞Ìôî Ï∂îÍ∞Ä
	MoveToDropSpeed = 800.0f;
	DropHeight = 200.0f;
	InitialDropVelocity = 100.0f;
    
	// Private Variables Ï¥àÍ∏∞Ìôî Ï∂îÍ∞Ä
	DropTargetLocation = FVector::ZeroVector;
	bIsMovingToDrop = false;
}

void ASLMouseActor::BeginPlay()
{
    Super::BeginPlay();

    // Î©îÏãú Ïª¥Ìè¨ÎÑåÌä∏ ÏΩúÎ¶¨Ï†Ñ ÏÑ§Ï†ï - Í≥µÍ≤© Î∞õÏùÑ Ïàò ÏûàÎèÑÎ°ù ÏàòÏ†ï
    if (MouseMeshComponent)
    {
        MouseMeshComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        MouseMeshComponent->SetCollisionObjectType(ECC_WorldDynamic);
        MouseMeshComponent->SetCollisionResponseToAllChannels(ECR_Block);
        MouseMeshComponent->SetCollisionResponseToChannel(ECC_Camera, ECR_Ignore);
        MouseMeshComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block); // Í≥µÍ≤© Ï±ÑÎÑê
    }

    // ÏΩúÎ¶¨Ï†Ñ Ïª¥Ìè¨ÎÑåÌä∏ ÏÑ§Ï†ï
    if (CollisionComponent)
    {
        CollisionComponent->OnComponentHit.AddDynamic(this, &ASLMouseActor::OnCollisionHit);
        CollisionComponent->SetSphereRadius(DetectionRange);
        
        // Í∏∞Î≥∏ ÏΩúÎ¶¨Ï†Ñ ÏÑ§Ï†ï - Í≥µÍ≤© Î∞õÏùÑ Ïàò ÏûàÎèÑÎ°ù
        CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        CollisionComponent->SetCollisionObjectType(ECC_WorldDynamic);
        CollisionComponent->SetCollisionResponseToAllChannels(ECR_Block);
        CollisionComponent->SetCollisionResponseToChannel(ECC_Camera, ECR_Ignore);
        CollisionComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);
        CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block); // Í≥µÍ≤© Ï±ÑÎÑê
    }

    if (BattleComponent)
    {
        BattleComponent->OnCharacterHited.AddDynamic(this, &ASLMouseActor::OnBattleComponentHit);
        // BattleComponent Í∏∞Î≥∏ ÌôúÏÑ±Ìôî
        BattleComponent->SetComponentTickEnabled(true);
    }

    TargetPlayer = FindPlayerCharacter();
    CurrentHealth = MaxHealth;
    bCanGrab = true;
    OrbitAngle = 0.0f;
    
    // Phase5Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Í≥µÍ≤© Î∂àÍ∞ÄÎä•
    bIsAttackable = false;
}

void ASLMouseActor::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

	if (CurrentState == EMouseActorState::Destroyed)
	{
		return;
	}

	if (!IsValid(TargetPlayer))
	{
		TargetPlayer = FindPlayerCharacter();
		if (!IsValid(TargetPlayer))
		{
			return;
		}
	}

	if (bIsStunned)
	{
		UpdateMeshRotation(DeltaTime);
		return;
	}
    
	if (bIsInPhase3Mode)
	{
		UpdatePhase3Movement(DeltaTime);
		UpdateMeshRotation(DeltaTime);
		return;
	}

	switch (CurrentState)
	{
	case EMouseActorState::MovingToOrbit:
		UpdateMoveToOrbitMovement(DeltaTime);
		break;
        
	case EMouseActorState::Orbiting:
		UpdateOrbitMovement(DeltaTime);
		if (CanGrabPlayer())
		{
			SetMouseActorState(EMouseActorState::Descending);
		}
		break;
        
	case EMouseActorState::Descending:
		UpdateDescentMovement(DeltaTime);
		if (IsPlayerInRange())
		{
			StartGrabPlayer();
		}
		break;
        
	case EMouseActorState::Grabbing:
		UpdateGrabMovement(DeltaTime);
		break;
        
	}

	UpdateMeshRotation(DeltaTime);
}

void ASLMouseActor::StartOrbiting()
{
	if (CurrentState == EMouseActorState::Destroyed)
	{
		return;
	}

	TargetPlayer = FindPlayerCharacter();
	
	if (!IsValid(TargetPlayer))
	{
		UE_LOG(LogTemp, Warning, TEXT("Mouse Actor: No valid player found for orbiting"));
		return;
	}

	OrbitCenter = TargetPlayer->GetActorLocation();
	OrbitAngle = 0.0f;
	
	MoveToOrbitTargetLocation = CalculateOrbitPosition();
	
	SetMouseActorState(EMouseActorState::MovingToOrbit);
}

void ASLMouseActor::StopOrbiting()
{
	// MovingToDrop ÏÉÅÌÉúÏùº ÎïåÎèÑ ÌîåÎ†àÏù¥Ïñ¥ Î∂ÑÎ¶¨ Ï≤òÎ¶¨
	if ((CurrentState == EMouseActorState::Grabbing || CurrentState == EMouseActorState::MovingToDrop) 
		&& IsValid(TargetPlayer))
	{
		TargetPlayer->DetachFromActor(FDetachmentTransformRules::KeepWorldTransform);
		TargetPlayer->CharacterDragged(false);
        
		if (UCharacterMovementComponent* MovementComp = TargetPlayer->GetCharacterMovement())
		{
			MovementComp->SetDefaultMovementMode();
		}
	}

	SetMouseActorState(EMouseActorState::Inactive);
	bIsMovingToDrop = false;
    
	if (IsValid(CollisionComponent))
	{
		CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
	}
}

void ASLMouseActor::DestroyMouseActor()
{
	if (CurrentState == EMouseActorState::Destroyed)
	{
		return;
	}

	if (CurrentState == EMouseActorState::Grabbing && IsValid(TargetPlayer))
	{
		TargetPlayer->DetachFromActor(FDetachmentTransformRules::KeepWorldTransform);
		TargetPlayer->CharacterDragged(false);
		
		if (UCharacterMovementComponent* MovementComp = TargetPlayer->GetCharacterMovement())
		{
			MovementComp->SetDefaultMovementMode();
		}
	}

	SetMouseActorState(EMouseActorState::Destroyed);

	if (IsValid(DestroyEffect) && IsValid(GetWorld()))
	{
		UNiagaraFunctionLibrary::SpawnSystemAtLocation(
			GetWorld(),
			DestroyEffect,
			GetActorLocation(),
			GetActorRotation()
		);
	}

	if (IsValid(DestroySound) && IsValid(GetWorld()))
	{
		UGameplayStatics::PlaySoundAtLocation(
			GetWorld(),
			DestroySound,
			GetActorLocation()
		);
	}

	if (OnMouseActorDestroyed.IsBound())
	{
		OnMouseActorDestroyed.Broadcast(this);
	}

	SetActorHiddenInGame(true);
	SetActorEnableCollision(false);
	SetActorTickEnabled(false);

}

EMouseActorState ASLMouseActor::GetCurrentState() const
{
	return CurrentState;
}

void ASLMouseActor::OnCollisionHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComponent, FVector NormalImpulse, const FHitResult& Hit)
{
	if (!IsValid(OtherActor) || CurrentState == EMouseActorState::Destroyed)
	{
		return;
	}

	if (ASLPlayerCharacter* PlayerCharacter = Cast<ASLPlayerCharacter>(OtherActor))
	{
		if (IsValid(PlayerCharacter) && CurrentState == EMouseActorState::Descending && CanGrabPlayer())
		{
			StartGrabPlayer();
		}
	}
}

void ASLMouseActor::OnBattleComponentHit(AActor* DamageCauser, float DamageAmount, const FHitResult& HitResult, EHitAnimType HitAnimType)
{
    UE_LOG(LogTemp, Warning, TEXT("üéØ OnBattleComponentHit called!"));
    UE_LOG(LogTemp, Warning, TEXT("   DamageCauser: %s"), DamageCauser ? *DamageCauser->GetName() : TEXT("NULL"));
    
    if (DamageCauser)
    {
        UE_LOG(LogTemp, Warning, TEXT("   DamageCauser Class: %s"), *DamageCauser->GetClass()->GetName());
    }
    
    UE_LOG(LogTemp, Warning, TEXT("   DamageAmount: %f"), DamageAmount);
    UE_LOG(LogTemp, Warning, TEXT("   HitAnimType: %d"), static_cast<int32>(HitAnimType));
    UE_LOG(LogTemp, Warning, TEXT("   Hit Location: %s"), *HitResult.ImpactPoint.ToString());
    UE_LOG(LogTemp, Warning, TEXT("   Current State: %d"), static_cast<int32>(CurrentState));
    UE_LOG(LogTemp, Warning, TEXT("   bIsAttackable: %s"), bIsAttackable ? TEXT("YES") : TEXT("NO"));
    UE_LOG(LogTemp, Warning, TEXT("   bIsStunned: %s"), bIsStunned ? TEXT("YES") : TEXT("NO"));

    if (CurrentState == EMouseActorState::Destroyed)
    {
        UE_LOG(LogTemp, Warning, TEXT("‚ùå Mouse Actor already destroyed - ignoring damage"));
        return;
    }
    
    // Í≥µÍ≤© Í∞ÄÎä•Ìïú ÏÉÅÌÉúÍ∞Ä ÏïÑÎãàÎ©¥ Îç∞ÎØ∏ÏßÄ Î¨¥Ïãú
    if (!bIsAttackable)
    {
        UE_LOG(LogTemp, Warning, TEXT("‚ùå Mouse Actor is not attackable - damage ignored"));
        UE_LOG(LogTemp, Warning, TEXT("   Try calling ApplyWallStun() first or ForceEnableAttack() for testing"));
        return;
    }

    UE_LOG(LogTemp, Warning, TEXT("‚úÖ Damage accepted! Applying %f damage"), DamageAmount);

    CurrentHealth -= DamageAmount;
    
    UE_LOG(LogTemp, Warning, TEXT("üéØ Mouse Actor hit! Remaining Health: %f / %f"), CurrentHealth, MaxHealth);

    // Îç∞ÎØ∏ÏßÄ Ïù¥ÌéôÌä∏ÎÇò ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù (ÏÑ†ÌÉùÏ†Å)
    if (IsValid(GrabEffect) && IsValid(GetWorld()))
    {
        UNiagaraFunctionLibrary::SpawnSystemAtLocation(
            GetWorld(),
            GrabEffect,
            GetActorLocation(),
            GetActorRotation()
        );
    }

    if (CurrentHealth <= 0.0f)
    {
        UE_LOG(LogTemp, Warning, TEXT("üíÄ Mouse Actor health depleted - destroying"));
        DestroyMouseActor();
    }
}

void ASLMouseActor::OnGrabCooldownFinished()
{
	bCanGrab = true;
	OnMouseGrabCooldownFinished.Broadcast();
}

void ASLMouseActor::OnCollisionReenabled()
{
	if (IsValid(CollisionComponent))
	{
		if (bIsInPhase3Mode)
		{
			// Phase3ÏóêÏÑúÎäî Í≤πÏπ®Îßå ÌóàÏö©
			CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
			CollisionComponent->SetCollisionResponseToAllChannels(ECR_Ignore);
			CollisionComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);
			CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Overlap);
		}
		else
		{
			// ÏùºÎ∞ò Î™®ÎìúÏóêÏÑúÎäî Í∏∞Ï°¥ ÏÑ§Ï†ï
			CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
			CollisionComponent->SetCollisionResponseToAllChannels(ECR_Ignore);
			CollisionComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);
			CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);
		}
	}
	OnMouseCollisionReenabled.Broadcast();
}

void ASLMouseActor::UpdateOrbitMovement(float DeltaTime)
{
	if (!IsValid(TargetPlayer))
	{
		return;
	}

	OrbitCenter = TargetPlayer->GetActorLocation();
	
	OrbitAngle += OrbitSpeed * DeltaTime;
	if (OrbitAngle >= 360.0f)
	{
		OrbitAngle -= 360.0f;
	}

	FVector OrbitPosition = CalculateOrbitPosition();
	SetActorLocation(OrbitPosition);
}

void ASLMouseActor::UpdateDescentMovement(float DeltaTime)
{
	if (!IsValid(TargetPlayer))
	{
		return;
	}

	FVector PlayerLocation = TargetPlayer->GetActorLocation();
	FVector CurrentLocation = GetActorLocation();
	FVector DirectionToPlayer = (PlayerLocation - CurrentLocation).GetSafeNormal();
	
	if (DirectionToPlayer.IsZero())
	{
		return;
	}

	FVector MovementDelta = DirectionToPlayer * DescentSpeed * DeltaTime;
	FVector NewLocation = CurrentLocation + MovementDelta;
	SetActorLocation(NewLocation);
}

void ASLMouseActor::UpdateGrabMovement(float DeltaTime)
{
	FVector CurrentLocation = GetActorLocation();
	FVector DirectionToTarget = (GrabTargetLocation - CurrentLocation).GetSafeNormal();
	
	if (DirectionToTarget.IsZero())
	{
		return;
	}

	FVector MovementDelta = DirectionToTarget * GrabMoveSpeed * DeltaTime;
	FVector NewLocation = CurrentLocation + MovementDelta;
	SetActorLocation(NewLocation);

	float DistanceToTarget = FVector::Dist(CurrentLocation, GrabTargetLocation);
	if (DistanceToTarget <= 50.0f)
	{
		CompleteGrabPlayer();
	}
}

void ASLMouseActor::UpdateMeshRotation(float DeltaTime)
{
	if (!IsValid(MouseMeshComponent) || !IsValid(TargetPlayer))
	{
		return;
	}

	FVector MeshLocation = MouseMeshComponent->GetComponentLocation();
	FVector PlayerLocation = TargetPlayer->GetActorLocation();
    
	FRotator LookAtRotation = UKismetMathLibrary::FindLookAtRotation(MeshLocation, PlayerLocation);
    
	if (bIsInPhase3Mode)
	{
		LookAtRotation.Yaw -= 90.0f; 
		LookAtRotation.Pitch -= 20.0f; 
		LookAtRotation.Roll -= 10.0f; 
		
		
		FRotator CurrentRotation = MouseMeshComponent->GetComponentRotation();
		FRotator NewRotation = FMath::RInterpTo(CurrentRotation, LookAtRotation, DeltaTime, 5.0f);
		MouseMeshComponent->SetWorldRotation(NewRotation);
		
		
		FVector DirectionToPlayer = (PlayerLocation - GetActorLocation()).GetSafeNormal();
		FRotator ActorRotation = DirectionToPlayer.Rotation();
		FRotator CurrentActorRotation = GetActorRotation();
		FRotator NewActorRotation = FMath::RInterpTo(CurrentActorRotation, ActorRotation, DeltaTime, 3.0f);
		SetActorRotation(NewActorRotation);
	}
	else
	{
		// Í∏∞Ï°¥ Î∂ÄÎìúÎü¨Ïö¥ ÌöåÏ†Ñ
		LookAtRotation.Yaw -= 90.0f;
		LookAtRotation.Pitch -= 45.0f;
        
		FRotator CurrentRotation = MouseMeshComponent->GetComponentRotation();
		FRotator NewRotation = FMath::RInterpTo(CurrentRotation, LookAtRotation, DeltaTime, 3.0f);
		MouseMeshComponent->SetWorldRotation(NewRotation);
	}
}

void ASLMouseActor::UpdateMoveToOrbitMovement(float DeltaTime)
{
	if (!IsValid(TargetPlayer))
	{
		return;
	}

	OrbitCenter = TargetPlayer->GetActorLocation();
	MoveToOrbitTargetLocation = CalculateOrbitPosition();

	FVector CurrentLocation = GetActorLocation();
	FVector DirectionToTarget = (MoveToOrbitTargetLocation - CurrentLocation).GetSafeNormal();
	
	if (DirectionToTarget.IsZero())
	{
		SetMouseActorState(EMouseActorState::Orbiting);
		return;
	}

	FVector MovementDelta = DirectionToTarget * MoveToOrbitSpeed * DeltaTime;
	FVector NewLocation = CurrentLocation + MovementDelta;
	SetActorLocation(NewLocation);

	float DistanceToTarget = FVector::Dist(CurrentLocation, MoveToOrbitTargetLocation);
	if (DistanceToTarget <= 50.0f)
	{
		SetMouseActorState(EMouseActorState::Orbiting);
	}
}

void ASLMouseActor::StartGrabPlayer()
{
	if (!IsValid(TargetPlayer) || CurrentState != EMouseActorState::Descending || !CanGrabPlayer())
	{
		return;
	}

	SetMouseActorState(EMouseActorState::Grabbing);
	bCanGrab = false;

	FVector CurrentLocation = GetActorLocation();
	FVector DirectionFromPlayer = (CurrentLocation - TargetPlayer->GetActorLocation()).GetSafeNormal();
	GrabTargetLocation = CurrentLocation + (DirectionFromPlayer * GrabDistance);
	GrabTargetLocation.Z += GrabHeight;

	TargetPlayer->AttachToActor(this, FAttachmentTransformRules::KeepWorldTransform);
	TargetPlayer->CharacterDragged(true);
	
	if (UCharacterMovementComponent* MovementComp = TargetPlayer->GetCharacterMovement())
	{
		MovementComp->DisableMovement();
	}

	if (IsValid(GrabEffect) && IsValid(GetWorld()))
	{
		UNiagaraFunctionLibrary::SpawnSystemAtLocation(
			GetWorld(),
			GrabEffect,
			GetActorLocation(),
			GetActorRotation()
		);
	}

	if (IsValid(GrabSound) && IsValid(GetWorld()))
	{
		UGameplayStatics::PlaySoundAtLocation(
			GetWorld(),
			GrabSound,
			GetActorLocation()
		);
	}
}

void ASLMouseActor::CompleteGrabPlayer()
{
	if (CurrentState != EMouseActorState::Grabbing)
	{
		return;
	}

	if (IsValid(TargetPlayer))
	{
		// ÌîåÎ†àÏù¥Ïñ¥Î•º ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú Î∞îÎ°ú Î∂ÑÎ¶¨
		TargetPlayer->DetachFromActor(FDetachmentTransformRules::KeepWorldTransform);
		TargetPlayer->CharacterDragged(false);
        
		// ÏûêÏó∞Ïä§Îü¨Ïö¥ Î¨ºÎ¶¨ ÎÇôÌïò Ï†ÅÏö©
		if (UCharacterMovementComponent* MovementComp = TargetPlayer->GetCharacterMovement())
		{
			MovementComp->SetMovementMode(MOVE_Falling);
            
			// ÏïΩÍ∞ÑÏùò ÏïÑÎûòÏ™Ω Ï¥àÍ∏∞ ÏÜçÎèÑ Î∂ÄÏó¨ (ÏÑ†ÌÉùÏ†Å)
			FVector InitialVelocity = FVector(0, 0, -InitialDropVelocity);
			MovementComp->Velocity = InitialVelocity;
		}
	}

	// ÏΩúÎ¶¨Ï†Ñ Ïû¨ÌôúÏÑ±Ìôî Ï≤òÎ¶¨
	if (IsValid(CollisionComponent))
	{
		CollisionComponent->SetCollisionEnabled(ECollisionEnabled::NoCollision);
        
		FTimerHandle CollisionTimer;
		GetWorldTimerManager().SetTimer(
			CollisionTimer,
			this,
			&ASLMouseActor::OnCollisionReenabled,
			CollisionDisableTime,
			false
		);
	}

	// Îç∞ÎØ∏ÏßÄ Ï†ÅÏö©
	ApplyGrabDamage();

	// Ïø®Îã§Ïö¥ Î∞è Í∂§ÎèÑ Î≥µÍ∑Ä
	float RandomCooldown = GetRandomGrabCooldown();
	FTimerHandle CooldownTimer;
	GetWorldTimerManager().SetTimer(
		CooldownTimer,
		this,
		&ASLMouseActor::OnGrabCooldownFinished,
		RandomCooldown,
		false
	);
    
	SetMouseActorState(EMouseActorState::Orbiting);
    
	if (IsValid(TargetPlayer))
	{
		OrbitCenter = TargetPlayer->GetActorLocation();
		OrbitAngle = 0.0f;
        
		FVector OrbitPosition = CalculateOrbitPosition();
		SetActorLocation(OrbitPosition);
	}

	OnMouseGrabCompleted.Broadcast();
}

void ASLMouseActor::ApplyGrabDamage()
{
	if (!IsValid(TargetPlayer))
	{
		return;
	}

	if (UBattleComponent* PlayerBattleComp = TargetPlayer->FindComponentByClass<UBattleComponent>())
	{
		FHitResult HitResult;
		HitResult.ImpactPoint = TargetPlayer->GetActorLocation();
		HitResult.Location = TargetPlayer->GetActorLocation();
		HitResult.ImpactNormal = (GetActorLocation() - TargetPlayer->GetActorLocation()).GetSafeNormal();
		HitResult.Distance = FVector::Dist(GetActorLocation(), TargetPlayer->GetActorLocation());
		HitResult.TraceStart = GetActorLocation();
		HitResult.TraceEnd = TargetPlayer->GetActorLocation();
		
		PlayerBattleComp->ReceiveHitResult(GrabDamage, this, HitResult, EAttackAnimType::AAT_WZ_Loop_Attack04);
	}
}

void ASLMouseActor::SetMouseActorState(EMouseActorState NewState)
{
	if (CurrentState != NewState)
	{
		CurrentState = NewState;
		OnMouseStateChanged.Broadcast(NewState);
	}
}

ASLPlayerCharacter* ASLMouseActor::FindPlayerCharacter()
{
	if (!IsValid(GetWorld()))
	{
		return nullptr;
	}

	APlayerController* PlayerController = GetWorld()->GetFirstPlayerController();
	if (!IsValid(PlayerController))
	{
		return nullptr;
	}

	APawn* PlayerPawn = PlayerController->GetPawn();
	if (!IsValid(PlayerPawn))
	{
		return nullptr;
	}

	return Cast<ASLPlayerCharacter>(PlayerPawn);
}

bool ASLMouseActor::IsPlayerInRange() const
{
	if (!IsValid(TargetPlayer))
	{
		return false;
	}

	float DistanceToPlayer = FVector::Dist(GetActorLocation(), TargetPlayer->GetActorLocation());
	return DistanceToPlayer <= DetectionRange;
}

bool ASLMouseActor::CanGrabPlayer() const
{
	if (bIsInPhase3Mode)
	{
		return false;
	}

	if (IsValid(TargetPlayer))
	{
		if (ASLPlayerCharacter* PlayerCharacter = Cast<ASLPlayerCharacter>(TargetPlayer))
		{
			// TAG_Character_Dead ÏÉÅÌÉúÏù∏ÏßÄ ÌôïÏù∏
			if (PlayerCharacter->IsInPrimaryState(TAG_Character_Dead))
			{
				return false;
			}
		}
	}
	
	return bCanGrab && (CurrentState == EMouseActorState::Orbiting || CurrentState == EMouseActorState::Descending);
}

float ASLMouseActor::GetRandomGrabCooldown() const
{
   return FMath::FRandRange(GrabCooldownMin, GrabCooldownMax);
}

FVector ASLMouseActor::CalculateOrbitPosition() const
{
   float RadianAngle = FMath::DegreesToRadians(OrbitAngle);
   FVector OrbitPosition = OrbitCenter;
   OrbitPosition.X += FMath::Cos(RadianAngle) * OrbitRadius;
   OrbitPosition.Y += FMath::Sin(RadianAngle) * OrbitRadius;
   OrbitPosition.Z += OrbitHeight;
   
   return OrbitPosition;
}

void ASLMouseActor::StartPhase3HorrorMode()
{
	if (CurrentState == EMouseActorState::Destroyed)
	{
		return;
	}

	bIsInPhase3Mode = true;
	SetMouseActorState(EMouseActorState::Descending);
	
	// Phase3ÏóêÏÑúÎäî ÏΩúÎ¶¨Ï†ÑÏùÑ Îçî ÏûëÍ≤å ÏÑ§Ï†ïÌïòÍ≥† Í≤πÏπ®Îßå ÌóàÏö©
	if (CollisionComponent)
	{
		CollisionComponent->SetSphereRadius(DetectionRange * 0.5f); // ÏΩúÎ¶¨Ï†Ñ Î≤îÏúÑ Ï∂ïÏÜå
		CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
		CollisionComponent->SetCollisionResponseToAllChannels(ECR_Ignore);
		CollisionComponent->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);
		CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Overlap);
	}
}

void ASLMouseActor::UpdatePhase3Movement(float DeltaTime)
{
	if (!IsValid(TargetPlayer))
	{
		return;
	}

	bIsPlayerLookingAtMe = IsPlayerLookingAtMe();
   
	if (bIsPlayerLookingAtMe)
	{
		return;
	}

	FVector PlayerLocation = TargetPlayer->GetActorLocation();
	FVector CurrentLocation = GetActorLocation();
	float DistanceToPlayer = FVector::Dist(CurrentLocation, PlayerLocation);
   
	// Ïä§Ïúï Í≥µÍ≤© Î≤îÏúÑ ÎÇ¥Ïóê ÏûàÍ≥† Ïø®ÌÉÄÏûÑÏù¥ ÎÅùÎÇ¨ÏúºÎ©¥ Í≥µÍ≤©
	if (DistanceToPlayer <= SweepAttackRange && bCanSweepAttack)
	{
		PerformSweepAttack();
		return;
	}
   
	if (DistanceToPlayer > Phase3StopDistance)
	{
		FVector DirectionToPlayer = (PlayerLocation - CurrentLocation).GetSafeNormal();
		FVector MovementDelta = DirectionToPlayer * Phase3ChaseSpeed * DeltaTime;
		FVector NewLocation = CurrentLocation + MovementDelta;
		SetActorLocation(NewLocation);
	}
}


bool ASLMouseActor::IsPlayerLookingAtMe() const
{
	if (!IsValid(TargetPlayer))
	{
		return false;
	}

	// ÌîåÎ†àÏù¥Ïñ¥ Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú Ïπ¥Î©îÎùº Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
	APlayerController* PlayerController = Cast<APlayerController>(TargetPlayer->GetController());
	if (!PlayerController)
	{
		return false;
	}

	// Ïπ¥Î©îÎùº ÏúÑÏπòÏôÄ Î∞©Ìñ• Í∞ÄÏ†∏Ïò§Í∏∞
	FVector CameraLocation;
	FRotator CameraRotation;
	PlayerController->GetPlayerViewPoint(CameraLocation, CameraRotation);

	FVector CameraForward = CameraRotation.Vector();
	FVector MouseLocation = GetActorLocation();

	// Ïπ¥Î©îÎùºÏóêÏÑú ÎßàÏö∞Ïä§ Ïï°ÌÑ∞Î°úÏùò Î∞©Ìñ•
	FVector DirectionToMouse = (MouseLocation - CameraLocation).GetSafeNormal();

	// Í∞ÅÎèÑ ÌôïÏù∏
	float DotProduct = FVector::DotProduct(CameraForward, DirectionToMouse);
	DotProduct = FMath::Clamp(DotProduct, -1.0f, 1.0f);
	float AngleInDegrees = FMath::RadiansToDegrees(FMath::Acos(DotProduct));

	// ÏãúÏïºÍ∞Å Î≤îÏúÑ Î∞ñÏù¥Î©¥ false
	if (AngleInDegrees > PlayerLookCheckAngle)
	{
		return false;
	}

	// Î†àÏù¥Ï∫êÏä§Ìä∏Î°ú Ïã§Ï†úÎ°ú Î≥¥Ïù¥ÎäîÏßÄ ÌôïÏù∏
	FHitResult HitResult;
	FCollisionQueryParams QueryParams;
	QueryParams.AddIgnoredActor(this);
	QueryParams.AddIgnoredActor(TargetPlayer);
	QueryParams.bTraceComplex = false;

	// Ïπ¥Î©îÎùºÏóêÏÑú ÎßàÏö∞Ïä§ Ïï°ÌÑ∞Î°ú Î†àÏù¥Ï∫êÏä§Ìä∏
	bool bHit = GetWorld()->LineTraceSingleByChannel(
		HitResult,
		CameraLocation,
		MouseLocation,
		ECC_Visibility,
		QueryParams
	);

	return !bHit;
}

void ASLMouseActor::RestoreOriginalAppearance()
{
   if (!IsValid(MouseMeshComponent))
   {
       return;
   }

   if (IsValid(OriginalMesh))
   {
       MouseMeshComponent->SetStaticMesh(OriginalMesh);
   }
	
	MouseMeshComponent->SetWorldScale3D(FVector(1.0f, 1.0f, 1.0f));
}

void ASLMouseActor::PerformSweepAttack()
{
	if (!bCanSweepAttack || !bIsInPhase3Mode || !IsValid(TargetPlayer))
	{
		return;
	}
    
	bCanSweepAttack = false;
	CurrentHitCount = 0;
	MultiHitTargets.Empty();
    
	// ÎÇòÏù¥ÏïÑÍ∞ÄÎùº Ïù¥ÌéôÌä∏ Ïû¨ÏÉù (ÌîåÎ†àÏù¥Ïñ¥ Î∞©Ìñ•ÏúºÎ°ú)
	if (IsValid(SweepAttackEffect) && IsValid(GetWorld()))
	{
		FVector StartLocation = GetActorLocation();
		FVector PlayerLocation = TargetPlayer->GetActorLocation();
		
		// ÌîåÎ†àÏù¥Ïñ¥ Î∞©Ìñ• Í≥ÑÏÇ∞ (ÏàòÌèâÎ©¥ÏóêÏÑú)
		FVector DirectionToPlayer = (PlayerLocation - StartLocation);
		DirectionToPlayer.Z = 0.0f; // ÏàòÌèâ Î∞©Ìñ•Îßå Í≥†Î†§
		DirectionToPlayer.Normalize();
		
		// Ïù¥ÌéôÌä∏ ÌöåÏ†Ñ Í≥ÑÏÇ∞ (Up VectorÍ∞Ä ÌîåÎ†àÏù¥Ïñ¥Î•º Ìñ•ÌïòÎèÑÎ°ù)
		FRotator EffectRotation = UKismetMathLibrary::MakeRotFromZ(DirectionToPlayer);
		
		UNiagaraFunctionLibrary::SpawnSystemAtLocation(
			GetWorld(),
			SweepAttackEffect,
			StartLocation,
			EffectRotation
		);
		
		UE_LOG(LogTemp, Warning, TEXT("Mouse Actor: Effect spawned at rotation Yaw=%f, Player direction=%s"), 
			EffectRotation.Yaw, *DirectionToPlayer.ToString());
	}
    
	// Ï≤´ Î≤àÏß∏ ÌûàÌä∏ Ïã§Ìñâ
	ExecuteSweepAttack();
	CurrentHitCount++;
    
	// Îã§Îã® ÌûàÌä∏ ÌÉÄÏù¥Î®∏ ÏãúÏûë
	if (SweepAttackHitCount > 1)
	{
		StartMultiHitTimer();
	}
    
	// Ïø®ÌÉÄÏûÑ ÏãúÏûë
	if (IsValid(GetWorld()))
	{
		GetWorld()->GetTimerManager().SetTimer(
			SweepAttackCooldownTimer,
			this,
			&ASLMouseActor::OnSweepAttackCooldownFinished,
			SweepAttackCooldown,
			false
		);
	}
}

void ASLMouseActor::ExecuteSweepAttack()
{
    if (!IsValid(GetWorld()) || !IsValid(TargetPlayer))
    {
        return;
    }
    
    FVector StartLocation = GetActorLocation();
    FVector DirectionToPlayer = (TargetPlayer->GetActorLocation() - StartLocation).GetSafeNormal();
    FVector EndLocation = StartLocation + (DirectionToPlayer * SweepAttackRange);

    if (bShowSweepDebug)
    {
        FVector CenterPoint = (StartLocation + EndLocation) * 0.5f;
        FRotator BoxRotation = DirectionToPlayer.Rotation();
        FColor DebugColor = (CurrentHitCount == 1) ? FColor::Red : FColor::Orange;
        
        DrawDebugBox(
            GetWorld(),
            CenterPoint,
            FVector(SweepAttackRange * 0.5f, 100.0f, 100.0f), // Î∞ïÏä§ ÌÅ¨Í∏∞ Ï¶ùÍ∞Ä
            BoxRotation.Quaternion(),
            DebugColor,
            false,
            SweepAttackHitInterval + 0.5f
        );
    }
    
    // Ïä§Ïúï Î∞ïÏä§ ÌÅ¨Í∏∞ Ï¶ùÍ∞Ä
    FCollisionShape SweepShape = FCollisionShape::MakeBox(FVector(100.0f, 100.0f, 100.0f));
    
    FCollisionQueryParams QueryParams;
    QueryParams.AddIgnoredActor(this);
    QueryParams.bTraceComplex = false; // Ï∂îÍ∞Ä
    
    TArray<FHitResult> HitResults;
    FQuat SweepRotation = DirectionToPlayer.Rotation().Quaternion();
    
    // Ïó¨Îü¨ ÏΩúÎ¶¨Ï†Ñ Ï±ÑÎÑêÎ°ú ÏãúÎèÑ
    TArray<ECollisionChannel> ChannelsToTest = {
        ECC_Pawn,
        ECC_WorldDynamic,
        ECC_GameTraceChannel1  // ÌîåÎ†àÏù¥Ïñ¥ Í≥µÍ≤© Ï±ÑÎÑê
    };
    
    bool bHit = false;
    for (ECollisionChannel Channel : ChannelsToTest)
    {
        bHit = GetWorld()->SweepMultiByChannel(
            HitResults,
            StartLocation,
            EndLocation,
            SweepRotation,
            Channel,
            SweepShape,
            QueryParams
        );
        
        if (bHit && HitResults.Num() > 0)
        {
            UE_LOG(LogTemp, Warning, TEXT("Mouse Actor: Sweep hit detected on channel %d"), static_cast<int32>(Channel));
            break;
        }
    }
    
    if (bHit)
    {
        for (const FHitResult& Hit : HitResults)
        {
            if (AActor* HitActor = Hit.GetActor())
            {
            	if (CurrentHitCount >= 1 || MultiHitTargets.Contains(HitActor))
                {
                    if (CurrentHitCount == 1)
                    {
                        MultiHitTargets.Add(HitActor);
                    }
                    
                    if (UBattleComponent* TargetBattleComp = HitActor->FindComponentByClass<UBattleComponent>())
                    {
                        float CurrentDamage = SweepAttackDamage;
                        if (CurrentHitCount > 1)
                        {
                            CurrentDamage *= 0.7f;
                        }
                        
                        TargetBattleComp->ReceiveHitResult(
                            CurrentDamage,
                            this,
                            Hit,
                            EAttackAnimType::AAT_WZ_Loop_Attack04
                        );
                        
                        UE_LOG(LogTemp, Warning, TEXT("Mouse Actor Phase3: Sweep attack hit %s (Hit %d/%d, Damage: %f)"), 
                            *HitActor->GetName(), CurrentHitCount, SweepAttackHitCount, CurrentDamage);
                    }
                }
            }
        }
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT("Mouse Actor: Sweep attack found no targets"));
    }
}

void ASLMouseActor::OnSweepAttackCooldownFinished()
{
    bCanSweepAttack = true;
}

void ASLMouseActor::StartMultiHitTimer()
{
	if (IsValid(GetWorld()) && CurrentHitCount < SweepAttackHitCount)
	{
		GetWorld()->GetTimerManager().SetTimer(
			MultiHitTimer,
			this,
			&ASLMouseActor::OnMultiHitTimerFinished,
			SweepAttackHitInterval,
			false
		);
	}
}

void ASLMouseActor::OnMultiHitTimerFinished()
{
	if (CurrentHitCount < SweepAttackHitCount)
	{
		CurrentHitCount++;
		ExecuteSweepAttack();
        
		// Îã§Ïùå ÌûàÌä∏Í∞Ä ÏûàÏúºÎ©¥ ÌÉÄÏù¥Î®∏ Ïû¨ÏãúÏûë
		if (CurrentHitCount < SweepAttackHitCount)
		{
			StartMultiHitTimer();
		}
		else
		{
			// Î™®Îì† ÌûàÌä∏ ÏôÑÎ£å
			UE_LOG(LogTemp, Warning, TEXT("Mouse Actor: Multi-hit sweep attack completed (%d hits)"), SweepAttackHitCount);
		}
	}
}

void ASLMouseActor::ApplyWallStun(float StunDuration)
{
    // ÌîåÎ†àÏù¥Ïñ¥Î•º Í∑∏Îû© Ï§ëÏù¥Î©¥ Ïä§ÌÑ¥ Ï†ÅÏö©ÌïòÏßÄ ÏïäÏùå
    if (IsGrabbingPlayer())
    {
        UE_LOG(LogTemp, Warning, TEXT("‚ùå Cannot apply stun - Mouse Actor is grabbing player"));
        return;
    }

    if (bIsStunned || CurrentState == EMouseActorState::Destroyed)
    {
        UE_LOG(LogTemp, Warning, TEXT("‚ùå Cannot apply stun - Already stunned or destroyed"));
        return;
    }

    float ActualStunDuration = (StunDuration > 0) ? StunDuration : DefaultWallStunDuration;
    
    bIsStunned = true;
    bIsAttackable = true;
    
    // BattleComponent ÌôúÏÑ±Ìôî
    if (UBattleComponent* MouseBattleComp = FindComponentByClass<UBattleComponent>())
    {
        MouseBattleComp->SetComponentTickEnabled(true);
    }
    else
    {
        UE_LOG(LogTemp, Error, TEXT("‚ùå BattleComponent not found during stun!"));
    }
    
    // Î©îÏãú Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú ÌôúÏÑ±Ìôî
    if (MouseMeshComponent)
    {
        MouseMeshComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        MouseMeshComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);
    }
    
    // ÏΩúÎ¶¨Ï†Ñ Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú ÌôúÏÑ±Ìôî
    if (CollisionComponent)
    {
        CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
        CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);
    }
    
    // Ïä§ÌÑ¥ Ïù¥ÌéôÌä∏ Ïû¨ÏÉù
    if (IsValid(StunEffect) && IsValid(GetWorld()))
    {
        UNiagaraFunctionLibrary::SpawnSystemAtLocation(
            GetWorld(),
            StunEffect,
            GetActorLocation(),
            GetActorRotation()
        );
    }
    
    // Ïä§ÌÑ¥ ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù
    if (IsValid(StunSound) && IsValid(GetWorld()))
    {
        UGameplayStatics::PlaySoundAtLocation(
            GetWorld(),
            StunSound,
            GetActorLocation()
        );
    }
    
    // Ïä§ÌÑ¥ ÌöåÎ≥µ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
    if (IsValid(GetWorld()))
    {
        GetWorld()->GetTimerManager().SetTimer(
            StunRecoveryTimer,
            this,
            &ASLMouseActor::OnStunRecovery,
            ActualStunDuration,
            false
        );
    }
    
    // Ïù¥Î≤§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
    OnMouseActorStunned.Broadcast();
}

bool ASLMouseActor::IsStunned() const
{
    return bIsStunned;
}

void ASLMouseActor::EnableAttackability()
{
	bIsAttackable = true;
    
	UE_LOG(LogTemp, Warning, TEXT("üîì EnableAttackability called"));
    
	// BattleComponent ÌôúÏÑ±Ìôî
	if (UBattleComponent* MouseBattleComp = FindComponentByClass<UBattleComponent>())
	{
		MouseBattleComp->SetComponentTickEnabled(true);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ BattleComponent enabled"));
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("   ‚ùå BattleComponent not found!"));
	}
    
	// Î©îÏãú Ïª¥Ìè¨ÎÑåÌä∏ ÏΩúÎ¶¨Ï†Ñ ÏÑ§Ï†ï
	if (MouseMeshComponent)
	{
		MouseMeshComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
		MouseMeshComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ MouseMeshComponent collision enabled"));
	}
    
	// ÏΩúÎ¶¨Ï†Ñ Ïª¥Ìè¨ÎÑåÌä∏ ÏÑ§Ï†ï
	if (CollisionComponent)
	{
		CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryAndPhysics);
		CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Block);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ CollisionComponent collision enabled"));
	}
    
	UE_LOG(LogTemp, Display, TEXT("‚úÖ Mouse Actor attackability enabled - bIsAttackable: %s"), bIsAttackable ? TEXT("YES") : TEXT("NO"));
}

void ASLMouseActor::DisableAttackability()
{
	bIsAttackable = false;
    
	UE_LOG(LogTemp, Warning, TEXT("üîí DisableAttackability called"));
    
	// BattleComponent ÎπÑÌôúÏÑ±Ìôî
	if (UBattleComponent* MouseBattleComp = FindComponentByClass<UBattleComponent>())
	{
		MouseBattleComp->SetComponentTickEnabled(false);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ BattleComponent disabled"));
	}
    
	// Î©îÏãú Ïª¥Ìè¨ÎÑåÌä∏ ÏΩúÎ¶¨Ï†ÑÏùÑ Í≤πÏπ®Îßå ÌóàÏö©
	if (MouseMeshComponent)
	{
		MouseMeshComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Ignore);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ MouseMeshComponent attack collision disabled"));
	}
    
	// ÏΩúÎ¶¨Ï†Ñ Ïª¥Ìè¨ÎÑåÌä∏Î•º Í≤πÏπ®Îßå ÌóàÏö©
	if (CollisionComponent)
	{
		CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Ignore);
		UE_LOG(LogTemp, Warning, TEXT("   ‚úÖ CollisionComponent attack collision disabled"));
	}
    
	UE_LOG(LogTemp, Display, TEXT("‚úÖ Mouse Actor attackability disabled - bIsAttackable: %s"), bIsAttackable ? TEXT("YES") : TEXT("NO"));
}

void ASLMouseActor::OnStunRecovery()
{
    UE_LOG(LogTemp, Warning, TEXT("üîÑ Mouse Actor recovering from stun"));
    
    bIsStunned = false;
    bIsAttackable = false; // Ïä§ÌÑ¥ ÌöåÎ≥µ ÌõÑ Îã§Ïãú Í≥µÍ≤© Î∂àÍ∞ÄÎä•
    
    // BattleComponent ÎπÑÌôúÏÑ±Ìôî
    if (UBattleComponent* MouseBattleComp = FindComponentByClass<UBattleComponent>())
    {
        MouseBattleComp->SetComponentTickEnabled(false);
    }
    
    // ÏΩúÎ¶¨Ï†ÑÏùÑ ÏõêÎûòÎåÄÎ°ú Î≥µÍµ¨
    if (CollisionComponent)
    {
        CollisionComponent->SetCollisionEnabled(ECollisionEnabled::QueryOnly);
        CollisionComponent->SetCollisionResponseToChannel(ECC_GameTraceChannel1, ECR_Ignore);
    }
    
    // Ïù¥Î≤§Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
    OnMouseActorStunRecovered.Broadcast();
    
    UE_LOG(LogTemp, Display, TEXT("‚úÖ Mouse Actor stun recovery completed"));
}

void ASLMouseActor::DebugAttackability()
{
	UE_LOG(LogTemp, Warning, TEXT("=== MOUSE ACTOR DEBUG INFO ==="));
	UE_LOG(LogTemp, Warning, TEXT("bIsAttackable: %s"), bIsAttackable ? TEXT("YES") : TEXT("NO"));
	UE_LOG(LogTemp, Warning, TEXT("bIsStunned: %s"), bIsStunned ? TEXT("YES") : TEXT("NO"));
	UE_LOG(LogTemp, Warning, TEXT("CurrentState: %d"), static_cast<int32>(CurrentState));
	UE_LOG(LogTemp, Warning, TEXT("CurrentHealth: %f / %f"), CurrentHealth, MaxHealth);
    
	if (UBattleComponent* BattleComp = FindComponentByClass<UBattleComponent>())
	{
		UE_LOG(LogTemp, Warning, TEXT("BattleComponent Tick Enabled: %s"), BattleComp->IsComponentTickEnabled() ? TEXT("YES") : TEXT("NO"));
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("‚ùå BattleComponent NOT FOUND!"));
	}
    
	if (MouseMeshComponent)
	{
		UE_LOG(LogTemp, Warning, TEXT("MouseMesh Collision Enabled: %s"), 
			   MouseMeshComponent->GetCollisionEnabled() != ECollisionEnabled::NoCollision ? TEXT("YES") : TEXT("NO"));
		UE_LOG(LogTemp, Warning, TEXT("MouseMesh GameTraceChannel1 Response: %d"), 
			   static_cast<int32>(MouseMeshComponent->GetCollisionResponseToChannel(ECC_GameTraceChannel1)));
	}
    
	if (CollisionComponent)
	{
		UE_LOG(LogTemp, Warning, TEXT("CollisionComponent Collision Enabled: %s"), 
			   CollisionComponent->GetCollisionEnabled() != ECollisionEnabled::NoCollision ? TEXT("YES") : TEXT("NO"));
		UE_LOG(LogTemp, Warning, TEXT("CollisionComponent GameTraceChannel1 Response: %d"), 
			   static_cast<int32>(CollisionComponent->GetCollisionResponseToChannel(ECC_GameTraceChannel1)));
	}
	UE_LOG(LogTemp, Warning, TEXT("=============================="));
}

bool ASLMouseActor::IsGrabbingPlayer() const
{
	return CurrentState == EMouseActorState::Grabbing;
}

FVector ASLMouseActor::FindSafeDropLocation(const FVector& CurrentLocation) const
{
    if (!IsValid(GetWorld()))
    {
        return CurrentLocation;
    }

    // 1. ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú ÏïÑÎûòÎ°ú Î†àÏù¥Ï∫êÏä§Ìä∏
    FVector StartLocation = CurrentLocation;
    FVector EndLocation = StartLocation - FVector(0, 0, 2000.0f); // 2000 Ïú†Îãõ ÏïÑÎûòÎ°ú

    FHitResult HitResult;
    FCollisionQueryParams QueryParams;
    QueryParams.bTraceComplex = false;
    QueryParams.AddIgnoredActor(this);
    if (IsValid(TargetPlayer))
    {
        QueryParams.AddIgnoredActor(TargetPlayer);
    }

    bool bHit = GetWorld()->LineTraceSingleByChannel(
        HitResult,
        StartLocation,
        EndLocation,
        ECC_WorldStatic,
        QueryParams
    );

    if (bHit && IsLocationSafe(HitResult.Location))
    {
        // ÎïÖÏóêÏÑú ÏïΩÍ∞Ñ ÏúÑÏóê ÌîåÎ†àÏù¥Ïñ¥Î•º ÎìúÎ°≠
        return HitResult.Location + FVector(0, 0, 100.0f);
    }

    // 2. Ï£ºÎ≥Ä Ïó¨Îü¨ Î∞©Ìñ•ÏúºÎ°ú Í≤ÄÏÉâ
    TArray<FVector> SearchDirections = {
        FVector(200, 0, 0),      // Ïïû
        FVector(-200, 0, 0),     // Îí§
        FVector(0, 200, 0),      // Ïö∞
        FVector(0, -200, 0),     // Ï¢å
        FVector(200, 200, 0),    // ÏïûÏö∞
        FVector(-200, 200, 0),   // Îí§Ïö∞
        FVector(200, -200, 0),   // ÏïûÏ¢å
        FVector(-200, -200, 0)   // Îí§Ï¢å
    };

    for (const FVector& Direction : SearchDirections)
    {
        FVector SearchStart = CurrentLocation + Direction;
        FVector SearchEnd = SearchStart - FVector(0, 0, 2000.0f);

        if (GetWorld()->LineTraceSingleByChannel(
            HitResult,
            SearchStart,
            SearchEnd,
            ECC_WorldStatic,
            QueryParams))
        {
            if (IsLocationSafe(HitResult.Location))
            {
                return HitResult.Location + FVector(0, 0, 100.0f);
            }
        }
    }

    // 3. ÏïàÏ†ÑÌïú ÏúÑÏπòÎ•º Ï∞æÏßÄ Î™ªÌñàÏúºÎ©¥ ÏõêÎûò ÌîåÎ†àÏù¥Ïñ¥ ÏúÑÏπò Î∞òÌôò
    if (IsValid(TargetPlayer))
    {
        return TargetPlayer->GetActorLocation();
    }

    return CurrentLocation;
}

bool ASLMouseActor::IsLocationSafe(const FVector& Location) const
{
    if (!IsValid(GetWorld()))
    {
        return false;
    }

    // Ìï¥Îãπ ÏúÑÏπòÏóê Ï∂©Î∂ÑÌïú Í≥µÍ∞ÑÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    FVector CheckStart = Location + FVector(0, 0, 50.0f);
    FVector CheckEnd = Location + FVector(0, 0, 200.0f); // ÌîåÎ†àÏù¥Ïñ¥ ÎÜíÏù¥ÎßåÌÅº

    FCollisionQueryParams QueryParams;
    QueryParams.bTraceComplex = false;
    QueryParams.AddIgnoredActor(this);
    if (IsValid(TargetPlayer))
    {
        QueryParams.AddIgnoredActor(TargetPlayer);
    }

    // ÏúÑÏ™ΩÏóê Ïû•Ïï†Î¨ºÏù¥ ÏóÜÎäîÏßÄ ÌôïÏù∏
    bool bBlocked = GetWorld()->LineTraceTestByChannel(
        CheckStart,
        CheckEnd,
        ECC_WorldStatic,
        QueryParams
    );

    return !bBlocked;
}

void ASLMouseActor::StartMoveToDropLocation()
{
    SetMouseActorState(EMouseActorState::MovingToDrop);
    bIsMovingToDrop = true;
}

void ASLMouseActor::UpdateMoveToDropMovement(float DeltaTime)
{
    if (!IsValid(TargetPlayer) || !bIsMovingToDrop)
    {
        return;
    }

    FVector CurrentLocation = GetActorLocation();
    FVector DirectionToTarget = (DropTargetLocation - CurrentLocation).GetSafeNormal();
    
    if (DirectionToTarget.IsZero())
    {
        DropPlayerNaturally();
        return;
    }

    FVector MovementDelta = DirectionToTarget * MoveToDropSpeed * DeltaTime;
    FVector NewLocation = CurrentLocation + MovementDelta;
    SetActorLocation(NewLocation);

    float DistanceToTarget = FVector::Dist(CurrentLocation, DropTargetLocation);
    if (DistanceToTarget <= 50.0f)
    {
        DropPlayerNaturally();
    }
}

void ASLMouseActor::DropPlayerNaturally()
{
    if (!IsValid(TargetPlayer))
    {
        return;
    }

    bIsMovingToDrop = false;

    // ÌîåÎ†àÏù¥Ïñ¥Î•º ÎßàÏö∞Ïä§ÏóêÏÑú Î∂ÑÎ¶¨
    TargetPlayer->DetachFromActor(FDetachmentTransformRules::KeepWorldTransform);
    TargetPlayer->CharacterDragged(false);
    
    // ÌîåÎ†àÏù¥Ïñ¥Ïùò MovementComponent Í∞ÄÏ†∏Ïò§Í∏∞
    if (UCharacterMovementComponent* MovementComp = TargetPlayer->GetCharacterMovement())
    {
        // Falling Î™®ÎìúÎ°ú ÏÑ§Ï†ïÌïòÏó¨ ÏûêÏó∞Ïä§ÎüΩÍ≤å Îñ®Ïñ¥ÏßÄÎèÑÎ°ù Ìï®
        MovementComp->SetMovementMode(MOVE_Falling);
        
        // ÏïΩÍ∞ÑÏùò ÏïÑÎûòÏ™Ω Ï¥àÍ∏∞ ÏÜçÎèÑ Î∂ÄÏó¨ (ÏÑ†ÌÉùÏ†Å)
        FVector InitialVelocity = FVector(0, 0, -InitialDropVelocity);
        MovementComp->Velocity = InitialVelocity;
    }

    // ÏΩúÎ¶¨Ï†Ñ Ïû¨ÌôúÏÑ±Ìôî Ï≤òÎ¶¨
    if (IsValid(CollisionComponent))
    {
        CollisionComponent->SetCollisionEnabled(ECollisionEnabled::NoCollision);
        
        FTimerHandle CollisionTimer;
        GetWorldTimerManager().SetTimer(
            CollisionTimer,
            this,
            &ASLMouseActor::OnCollisionReenabled,
            CollisionDisableTime,
            false
        );
    }

    // Îç∞ÎØ∏ÏßÄ Ï†ÅÏö©
    ApplyGrabDamage();

    // Ïø®Îã§Ïö¥ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
    float RandomCooldown = GetRandomGrabCooldown();
    FTimerHandle CooldownTimer;
    GetWorldTimerManager().SetTimer(
        CooldownTimer,
        this,
        &ASLMouseActor::OnGrabCooldownFinished,
        RandomCooldown,
        false
    );
    
    // Í∂§ÎèÑ ÏÉÅÌÉúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    SetMouseActorState(EMouseActorState::Orbiting);
    
    if (IsValid(TargetPlayer))
    {
        OrbitCenter = TargetPlayer->GetActorLocation();
        OrbitAngle = 0.0f;
        
        FVector OrbitPosition = CalculateOrbitPosition();
        SetActorLocation(OrbitPosition);
    }

    OnMouseGrabCompleted.Broadcast();
}